$layout-gutter-width:      1em;
$layout-breakpoint-sm:     600px;
$layout-breakpoint-md:     960px;
$layout-breakpoint-lg:     1200px;

$flex-step: 5;
$flex-steps: (100 / $flex-step);

/*
 *  Responsive attributes
 *
 *  References:
 *  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
 *  2) https://css-tricks.com/almanac/properties/f/flex/
 *  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 *  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
 *  5) http://godban.com.ua/projects/flexgrid
 *
 */

@mixin flex-order-for-name($sizes:null) {
    @if $sizes == null {
        $sizes : '';

    }

    @for $i from 0 through $flex-steps {
        $order : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' { $suffix : '-#{$s}="#{$i}"'; }
            @else        { $suffix : '="#{$i}"';       }

            $order : '[flex-order#{$suffix}]';
        }

        #{$order} {
            order: #{$i};
        }
    }
}

@mixin offset-for-name($sizes:null) {
    @if $sizes == null { $sizes : ''; }

    @for $i from 0 through $flex-steps - 1 {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' { $suffix : '-#{$s}="#{$i * $flex-step}"'; }
            @else        { $suffix : '="#{$i * $flex-step}"';       }

            $offsets : $offsets + '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: #{$i * $flex-step + '%'};
        }
    }

    @each $i in 33 {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' {  $suffix : '-#{$s}="#{$i}"';   }
            @else        {  $suffix : '="#{$i}"';         }

            $offsets : '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: calc(100% / 3);
        }
    }

    @each $i in 66  {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' {  $suffix : '-#{$s}="#{$i}"';   }
            @else        {  $suffix : '="#{$i}"';         }

            $offsets : '[flex-offset#{$suffix}]';
        }

        #{$offsets} {
            margin-left: calc(200% / 3);
        }
    }
}

@mixin layout-for-name($name: null) {
    @if $name == null { $name : '';          }
    @if $name != ''   { $name : '-#{$name}'; }

    [layout#{$name}] {
        display: flex;
    }
    [layout#{$name}] > * {
        box-sizing: border-box;
    }
    [layout#{$name}="column"] {  flex-direction: column;  }
    [layout#{$name}="row"]    {  flex-direction: row;     }
}

@mixin flex-properties-for-name($name: null) {
    $flexName: 'flex';
    @if $name != null {
        $flexName: 'flex-#{$name}';
        $name : '-#{$name}';
    } @else {
        $name : '';
    }

    [#{$flexName}] {
        flex: 1;
    }

    // IE mediaQuery hack for 8,9,10 to set the flex-basis properly for 'flex' values
    // Details:
    // Do not use unitless flex-basis values in the flex shorthand because IE 10-11 will error.
    // Also use 0% instead of 0px since minifiers will often convert 0px to 0 (which is unitless and will have the same problem).
    // Safari, however, fails with flex-basis : 0% and requires flex-basis : 0px
    @if $name != '-print' {
        @media screen\0 {
            [#{$flexName}] {
                flex: 1 1 0%;
            }
        }
    }

    [#{$flexName}-start]       { margin-bottom: auto; }
    [#{$flexName}-end]         { margin-top: auto; }
    [#{$flexName}-none]        { flex: 0 0 auto; }
    [#{$flexName}-initial]     { flex: 0 1 auto; }
    [#{$flexName}-noshrink]    { flex: 1 0 auto; }
    [#{$flexName}-auto]        { flex: 1 1 auto; }
    [#{$flexName}-grow]        { flex: 1 1 100%; }

    // (1-20) * $flex-step = 0-100%

    [#{$flexName}],
    [layout="row"] > [#{$flexName}],
    [layout#{$name}="row"] > [#{$flexName}], {
        max-height: 100%;
        flex-wrap: wrap;
    }

    [layout#{$name}="column"] > [#{$flexName}],
    [layout="column"] > [#{$flexName}] {
        max-width: 100%;
        flex-wrap: wrap;
    }

    @for $i from 1 through 20 {
        $value : #{$i * $flex-step + '%'};

        [layout="row"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="row"] > [#{$flexName}="#{$i * $flex-step}"],
        [#{$flexName}="#{$i * $flex-step}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
        }

        [layout="column"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="column"] > [#{$flexName}="#{$i * $flex-step}"] {
            flex: 1 1 #{$value};
            max-height: #{$value};
        }
    }

    [layout="row"], [layout#{$name}="row"] {
        > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-width: 33.33%;
        }
        > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-width: 66.66%;
        }
    }
    [layout="column"], [layout#{$name}="column"] {
        > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-height: 33.33%;
        }
        > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-height: 66.66%;
        }
    }

}

@mixin layout-align-for-name($suffix: null) {

    // Alignment attributes for layout containers' children
    // Arrange on the Main Axis
    // center, start, end, space-between, space-around
    // flex-start is the default for justify-content
    // ------------------------------

    $name: 'layout-align';
    @if $suffix != null {
        $name: 'layout-align-#{$suffix}';
    }

    // Default
    [#{$name}]
    {
        justify-content :flex-start;
        align-content : stretch;
        align-items: stretch;
    }

    // Main Axis Center
    [#{$name}^="start"]
    {
        justify-content: flex-start;
    }

    // Main Axis Center
    [#{$name}^="center"]
    {
        justify-content: center;
    }

    // Main Axis End
    [#{$name}^="end"]
    {
        justify-content: flex-end;
    }

    // Main Axis Space Around
    [#{$name}^="space-around"]
    {
        justify-content: space-around;
    }

    // Main Axis Space Between
    [#{$name}^="space-between"]
    {
        justify-content: space-between;
    }


    // Arrange on the Cross Axis
    // center, start, end
    // stretch is the default for align-items
    // ------------------------------

    // Cross Axis Start
    [#{$name}$="start"]
    {
        align-items: flex-start;
        align-content: flex-start;
    }

    // Cross Axis Center
    [#{$name}$="center"],
    {
        align-items: center;
        align-content: center;
        max-width: 100%;
    }

    // Cross Axis Center IE overflow fix
    [#{$name}$="center"] > *
    {
        max-width: 100%;
    }

    // Cross Axis End
    [#{$name}$="end"]
    {
        align-items: flex-end;
        align-content: flex-end;
    }

    [#{$name}="start"],
    [#{$name}="end"],
    [#{$name}="center"],
    [#{$name}="space-around"],
    [#{$name}="space-between"]
    {
        align-items: stretch;
        align-content : stretch;
    }
}

@mixin layout-padding-margin-wrap() {

    [layout-padding] > [flex-sm],   [layout-padding] > [flex-lt-md] {
        padding: $layout-gutter-width / 4;
    }
    [layout-padding],
    [layout-padding] > [flex],
    [layout-padding] > [flex-gt-sm],
    [layout-padding] > [flex-md],
    [layout-padding] > [flex-lt-lg]
    {
        padding: $layout-gutter-width / 2;
    }
    [layout-padding] > [flex-gt-md],
    [layout-padding] > [flex-lg]
    {
        padding: $layout-gutter-width / 1;
    }

    [layout-margin] > [flex-sm],
    [layout-margin] > [flex-lt-md]
    {
        margin: $layout-gutter-width / 4;
    }

    [layout-margin],
    [layout-margin]  > [flex],
    [layout-margin]  > [flex-gt-sm],
    [layout-margin]  > [flex-md],
    [layout-margin]  > [flex-lt-lg]
    {
        margin: $layout-gutter-width / 2;
    }

    [layout-margin]  > [flex-gt-md],
    [layout-margin]  > [flex-lg]
    {
        margin: $layout-gutter-width / 1;
    }

    [layout-nowrap] {
        flex-wrap: nowrap;
    }
}

@mixin layouts_for_breakpoint($name:null) {
    @include offset-for-name($name);
    @include layout-align-for-name($name);
    @include flex-order-for-name($name);

    @include flex-properties-for-name($name);
    @include layout-for-name($name);
}

/*
 *  Apply Mixins to create Layout/Flexbox styles
 *
 */

@include layout-padding-margin-wrap();
@include layouts_for_breakpoint();


/**
 * `hide-gt-sm show-gt-lg` should hide from 600px to 1200px
 * `show-md hide-gt-sm` should show from 0px to 960px and hide at >960px
 * `hide-gt-md show-gt-sm` should show everywhere (show overrides hide)`
 *  hide means hide everywhere
 */


@media (max-width: $layout-breakpoint-sm - 1) {
    // SMALL SCREEN
    [hide], [hide-gt-xs] {
        &:not([show-gt-xs]):not([show-sm]):not([show]) {
            display: none;
        }
    }

    [hide-sm]:not([show-gt-xs]):not([show-sm]):not([show]) {
        display: none;
    }
    @include layouts_for_breakpoint(sm);
}

@media (min-width: $layout-breakpoint-sm) {
    // BIGGER THAN SMALL SCREEN
    @include layouts_for_breakpoint(gt-sm);

}

@media (min-width: $layout-breakpoint-sm) and (max-width: $layout-breakpoint-md - 1) {
    // MEDIUM SCREEN
    [hide], [hide-gt-xs], [hide-gt-sm] {
        &:not([show-gt-xs]):not([show-gt-sm]):not([show-md]):not([show]) {
            display: none;
        }
    }
    [hide-md]:not([show-md]):not([show]) {
        display: none;
    }
    @include layouts_for_breakpoint(md);
}

@media (min-width: $layout-breakpoint-md) {
    // BIGGER THAN MEDIUM SCREEN
    @include layouts_for_breakpoint(gt-md);
}

@media (min-width: $layout-breakpoint-md) and (max-width: $layout-breakpoint-lg - 1) {
    // LARGE SCREEN
    [hide],[hide-gt-xs], [hide-gt-sm], [hide-gt-md] {
        &:not([show-gt-xs]):not([show-gt-sm]):not([show-gt-md]):not([show-lg]):not([show]) {
            display: none;
        }
    }
    [hide-lg]:not([show-lg]):not([show]) {
        display: none;
    }

    @include layouts_for_breakpoint(lg);
}

@media (min-width: $layout-breakpoint-lg) {
    // BIGGER THAN LARGE SCREEN
    @include layouts_for_breakpoint(gt-lg);

    // BIGGER THAN LARGE SCREEN
    [hide], [hide-gt-xs], [hide-gt-sm], [hide-gt-md], [hide-gt-lg] {
        &:not([show-gt-xs]):not([show-gt-sm]):not([show-gt-md]):not([show-gt-lg]):not([show]) {
            display: none;
        }
    }
}
