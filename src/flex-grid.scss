$breakpoints: (
    (sm, 600px)
    (md, 960px)
    (lg, 1200px)
) !default;

$features: (
  'order'
  'offset'
  'layout'
  'flex'
  'layout-align'
  'visibility'
) !default;

$breakpoint-features: (
  'order'
  'offset'
  'layout'
  'flex'
  'layout-align'
  'visibility'
) !default;

$ie: false !default;

$layout-gutter-width: 1em !default;

$flex-step: 5 !default;
$flex-steps: (100 / $flex-step) !default;

//  Responsive attributes
//
//  References:
//  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
//  2) https://css-tricks.com/almanac/properties/f/flex/
//  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
//  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
//  5) http://godban.com.ua/projects/flexgrid

@mixin order-for-name($sizes:null) {
    @if $sizes == null {
        $sizes : '';

    }

    @for $i from 0 through $flex-steps {
        $order : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' { $suffix : '-#{$s}="#{$i}"'; }
            @else        { $suffix : '="#{$i}"';       }

            $order : '[flex-order#{$suffix}]';
        }

        #{$order} {
            order: #{$i};
        }
    }
}

@mixin offset-for-name($sizes:null) {
    @if $sizes == null { $sizes : ''; }

    @for $i from 0 through $flex-steps - 1 {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' { $suffix : '-#{$s}="#{$i * $flex-step}"'; }
            @else        { $suffix : '="#{$i * $flex-step}"';       }

            $offsets : $offsets + '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: #{$i * $flex-step + '%'};
        }
    }

    @each $i in 33 {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' {  $suffix : '-#{$s}="#{$i}"';   }
            @else        {  $suffix : '="#{$i}"';         }

            $offsets : '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: calc(100% / 3);
        }
    }

    @each $i in 66  {
        $offsets : '';
        $suffix : '';

        @each $s in $sizes {
            @if $s != '' {  $suffix : '-#{$s}="#{$i}"';   }
            @else        {  $suffix : '="#{$i}"';         }

            $offsets : '[flex-offset#{$suffix}]';
        }

        #{$offsets} {
            margin-left: calc(200% / 3);
        }
    }
}

@mixin layout-for-name($name: null) {
    @if $name == null { $name : '';          }
    @if $name != ''   { $name : '-#{$name}'; }

    [layout#{$name}] {
        display: flex;
        flex-wrap: wrap;
    }
    [layout#{$name}] > * {
        box-sizing: border-box;
    }
    [layout#{$name}="column"] {
        flex-direction: column;
    }
    [layout#{$name}="row"] {
        flex-direction: row;
    }
    [layout-nowrap#{$name}] {
        flex-wrap: nowrap;
    }
}

@mixin flex-for-name($name: null) {
    $flexName: 'flex';
    @if $name != null {
        $flexName: 'flex-#{$name}';
        $name : '-#{$name}';
    } @else {
        $name : '';
    }

    [#{$flexName}] {
        flex: 1;
    }

    @if $ie {
        // IE mediaQuery hack for 8,9,10 to set the flex-basis properly for 'flex' values
        // Details:
        // Do not use unitless flex-basis values in the flex shorthand because IE 10-11 will error.
        // Also use 0% instead of 0px since minifiers will often convert 0px to 0 (which is unitless and will have the same problem).
        // Safari, however, fails with flex-basis : 0% and requires flex-basis : 0px
        @media screen\0 {
            [#{$flexName}] {
                flex: 1 1 0%;
            }
        }
    }

    [#{$flexName}-start]       { margin-bottom: auto; }
    [#{$flexName}-end]         { margin-top: auto; }
    [#{$flexName}-none]        { flex: 0 0 auto; }
    [#{$flexName}-initial]     { flex: 0 1 auto; }
    [#{$flexName}-noshrink]    { flex: 1 0 auto; }
    [#{$flexName}-auto]        { flex: 1 1 auto; }
    [#{$flexName}-grow]        { flex: 1 1 100%; }

    // (1-20) * $flex-step = 0-100%

    [#{$flexName}],
    [layout="row"] > [#{$flexName}],
    [layout#{$name}="row"] > [#{$flexName}], {
        max-height: 100%;
    }

    [layout#{$name}="column"] > [#{$flexName}],
    [layout="column"] > [#{$flexName}] {
        max-width: 100%;
    }

    @for $i from 1 through 20 {
        $value : #{$i * $flex-step + '%'};

        [layout="row"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="row"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="row"] > [flex="#{$i * $flex-step}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
        }

        [layout="column"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="column"] > [#{$flexName}="#{$i * $flex-step}"],
        [layout#{$name}="column"] > [flex="#{$i * $flex-step}"] {
            flex: 1 1 #{$value};
            max-height: #{$value};
        }
    }

    [layout="row"] > [#{$flexName}="33"],
    [layout#{$name}="row"] > [#{$flexName}="33"],
    [layout#{$name}="row"] > [flex="33"] {
        flex: 1 1 33.33%;
        max-width: 33.33%;
    }

    [layout="column"] > [#{$flexName}="33"],
    [layout#{$name}="column"] > [#{$flexName}="33"],
    [layout#{$name}="column"] > [flex="33"] {
        flex: 1 1 33.33%;
        max-height: 33.33%;
    }

    [layout="row"] > [#{$flexName}="66"],
    [layout#{$name}="row"] > [#{$flexName}="66"],
    [layout#{$name}="row"] > [flex="66"] {
        flex: 1 1 66.66%;
        max-width: 66.66%;
    }

    [layout="column"] > [#{$flexName}="66"],
    [layout#{$name}="column"] > [#{$flexName}="66"],
    [layout#{$name}="column"] > [flex="66"] {
        flex: 1 1 66.66%;
        max-height: 66.66%;
    }
}

@mixin layout-align-for-name($suffix: null) {

    // Alignment attributes for layout containers' children
    // Arrange on the Main Axis
    // center, start, end, space-between, space-around
    // flex-start is the default for justify-content
    // ------------------------------

    $name: 'layout-align';
    @if $suffix != null {
        $name: 'layout-align-#{$suffix}';
    }

    // Default
    [#{$name}]
    {
        justify-content :flex-start;
        align-content : stretch;
        align-items: stretch;
    }

    // Main Axis Center
    [#{$name}^="start"]
    {
        justify-content: flex-start;
    }

    // Main Axis Center
    [#{$name}^="center"]
    {
        justify-content: center;
    }

    // Main Axis End
    [#{$name}^="end"]
    {
        justify-content: flex-end;
    }

    // Main Axis Space Around
    [#{$name}^="space-around"]
    {
        justify-content: space-around;
    }

    // Main Axis Space Between
    [#{$name}^="space-between"]
    {
        justify-content: space-between;
    }


    // Arrange on the Cross Axis
    // center, start, end
    // stretch is the default for align-items
    // ------------------------------

    // Cross Axis Start
    [#{$name}$="start"]
    {
        align-items: flex-start;
        align-content: flex-start;
    }

    // Cross Axis Center
    [#{$name}$="center"],
    {
        align-items: center;
        align-content: center;
        max-width: 100%;
    }

    // Cross Axis Center IE overflow fix
    [#{$name}$="center"] > *
    {
        max-width: 100%;
    }

    // Cross Axis End
    [#{$name}$="end"]
    {
        align-items: flex-end;
        align-content: flex-end;
    }

    [#{$name}="start"],
    [#{$name}="end"],
    [#{$name}="center"],
    [#{$name}="space-around"],
    [#{$name}="space-between"]
    {
        align-items: stretch;
        align-content : stretch;
    }
}

@mixin visibility-for-name($name: null) {
    @if $name == null { $name : '';          }
    @if $name != ''   { $name : '-#{$name}'; }

    [hide#{$name}] {
        display: none;
    }
}

@mixin layouts-for-breakpoint($name:null) {
    // flex-offset="10"
    @if ((index($features, 'offset') and $name == null) or ($name != null and index($breakpoint-features, 'offset'))) {
      @include offset-for-name($name);
    }
    // flex-order="2"
    @if ((index($features, 'order') and $name == null) or ($name != null and index($breakpoint-features, 'order'))) {
      @include order-for-name($name);
    }
    // layout="row"
    @if ((index($features, 'layout') and $name == null) or ($name != null and index($breakpoint-features, 'layout'))) {
      @include layout-for-name($name);
    }
    // layout-align="center center"
    @if ((index($features, 'layout-align') and $name == null) or ($name != null and index($breakpoint-features, 'layout-align'))) {
      @include layout-align-for-name($name);
    }
    // flex="50"
    @if ((index($features, 'flex') and $name == null) or ($name != null and index($breakpoint-features, 'flex'))) {
      @include flex-for-name($name);
    }
    // hide / show
    @if ((index($features, 'visibility') and $name == null) or ($name != null and index($breakpoint-features, 'visibility'))) {
      @include visibility-for-name($name);
    }
}

@mixin media-layouts() {
    @each $label, $value in $breakpoints {
        $first: nth($breakpoints, 1);
        $index: index($breakpoints, ($label, $value));
        /* BREAKPOINT #{$label} - #{$value} */

        @if $label == nth($first, 1) {
            @media (max-width: $value - 1) {
                @include layouts_for_breakpoint($label);
            }

        } @else {
            @media (min-width: nth(nth($breakpoints, $index - 1), 2) ) and (max-width: $value - 1) {
                @include layouts_for_breakpoint($label);
            }
        }

        @media (min-width: $value) {
            @include layouts_for_breakpoint("gt-#{$label}");
        }
    }
}

/* GENERIC LAYOUTS */
@include layouts-for-breakpoint();

@if variable-exists(breakpoints) {
    /* RESPONSIVE LAYOUTS */
    @include media-layouts();
}
